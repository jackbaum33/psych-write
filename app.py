# app.py
from flask import Flask, render_template, request, send_file
from docx import Document
import tempfile, os, platform, subprocess
from openai import OpenAI
from docx2pdf import convert

client = OpenAI()

app = Flask(__name__)

SECTIONS = {
    "referral": "Reason for Referral",
    "family_details": "Family Details",
    "birth_history": "Birth/Developmental History",
    "school_history": "School History",
    "previous_evals": "Previous Evaluations",
    "observations": "Behavioral Observations",
    "recommendations": "Recommendations"
}

def generate_paragraph(heading, bullets, appendix):
    bullet_text = "\n".join(f"- {b}" for b in bullets)
    prompt = (
        f"Using the following bullet points, write a professional paragraph for the {heading} section of a neuropsychological evaluation report. "
        f"Also incorporate relevant information from the test scores below if applicable.\n\n"
        f"Please do not answer with any text except the relevant paragraph.\n\n"
        f"Bullet Points:\n{bullet_text}\n\n"
        f"Appendix/Test Scores:\n{appendix}\n\n"
        f"Professional Paragraph:"
    )
    response = client.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "user", "content": prompt}],
    temperature=0.7,
    )
    return response.choices[0].message.content.strip()

def generate_test_analysis(test_name, appendix):
    prompt = (
        f"Please write a paragraph analyzing the results and significance of the following neuropsychological test: {test_name}. "
        f"Use the appendix information below to guide the interpretation if relevant.\n\n"
        f"Please do not answer with any text except the relevant paragraph.\n\n"
        f"Appendix/Test Scores:\n{appendix}\n\n"
        f"Professional Analysis:"
    )
    response = client.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "user", "content": prompt}],
    temperature=0.7,
    )
    return response.choices[0].message.content.strip()

@app.route("/")
def index():
    return render_template("form.html", sections=SECTIONS)

@app.route("/generate", methods=["POST"])
def generate():
    data = request.form
    doc = Document("doc_templates/report_template.docx")

    # Basic fields
    for field in ["name", "dob", "age", "grade", "school", "eval_dates"]:
        placeholder = f"{{{{{field}}}}}"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.text = paragraph.text.replace(placeholder, data.get(field, ""))

    psychologist_name = data.get("psychologist_name", "")
    footer_information = data.get("footer_information", psychologist_name)
    appendix = data.get("appendix", "")

    # AI-generated sections
    for key, label in SECTIONS.items():
        bullets = [b for b in data.getlist(key) if b.strip()]
        if bullets:
            paragraph = generate_paragraph(label, bullets, appendix)
            placeholder = f"{{{{{key}_paragraph}}}}"
            for paragraph_obj in doc.paragraphs:
                if placeholder in paragraph_obj.text:
                    paragraph_obj.text = paragraph_obj.text.replace(placeholder, paragraph)

    # Combined test paragraphs
    test_sections = [ts for ts in data.getlist("test_types") if ts.strip()]
    test_texts = []
    for i, test_name in enumerate(test_sections, start=1):
        test_bullets = [b for b in data.getlist(f"test_{i}_bullets") if b.strip()]
        section_text = f"\n\n{test_name}:\n"
        if test_bullets:
            paragraph = generate_paragraph(f"{test_name} Results", test_bullets, appendix)
            section_text += paragraph + "\n\n"
        analysis = generate_test_analysis(test_name, appendix)
        section_text += analysis
        test_texts.append(section_text)

    full_test_section = "\n\n".join(test_texts)
    test_list_string = ", ".join(test_sections)

    for paragraph_obj in doc.paragraphs:
        if "{{test_paragraphs}}" in paragraph_obj.text:
            paragraph_obj.text = paragraph_obj.text.replace("{{test_paragraphs}}", full_test_section)
        if "{{test_list}}" in paragraph_obj.text:
            paragraph_obj.text = paragraph_obj.text.replace("{{test_list}}", test_list_string)
        if "{{footer_information}}" in paragraph_obj.text:
            paragraph_obj.text = paragraph_obj.text.replace("{{footer_information}}", footer_information)

    # Add footer with psychologist name (optional if footer field is used)
    section = doc.sections[-1]
    footer = section.footer
    footer_paragraph = footer.paragraphs[0]
    footer_paragraph.text = f"Report generated by: {psychologist_name}"

    with tempfile.TemporaryDirectory() as tmpdir:
        docx_path = os.path.join(tmpdir, "report.docx")
        doc.save(docx_path)

        if "pdf" in data:
            sys = platform.system()
            pdf_path = os.path.join(tmpdir, "report.pdf")
            if sys in ["Windows", "Darwin"]:
                convert(docx_path, pdf_path)
            elif sys == "Linux":
                subprocess.run(["libreoffice", "--headless", "--convert-to", "pdf", "--outdir", tmpdir, docx_path], check=True)
            else:
                return "Unsupported OS for PDF conversion", 500
            return send_file(pdf_path, as_attachment=True, download_name="neuropsych_report.pdf")
        else:
            return send_file(docx_path, as_attachment=True, download_name="neuropsych_report.docx")

if __name__ == "__main__":
    app.run(debug=True)